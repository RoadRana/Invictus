# .github/workflows/deploy.yml
name: Deploy to AWS

on:
  # REMOVED: push to main (no direct pushes allowed)
  push:
    branches: [develop]  # Only develop gets auto-deployment
  pull_request:
    branches: [main, develop]  # PR validation only
  workflow_dispatch:  # Manual promotion workflow
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'promote-to-production'
        type: choice
        options:
        - promote-to-production
        - emergency-rollback
        - deploy-hotfix

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  # =============================================================================
  # QUALITY GATES - Runs on all PRs
  # =============================================================================
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all quality checks
        run: |
          npm run lint
          npm run type-check
          npm run test:unit -- --coverage
          npm run test:integration
          npm run security:scan
          npm run build

      - name: Upload build artifacts (for review)
        uses: actions/upload-artifact@v4
        with:
          name: pr-build-${{ github.event.number }}
          path: dist/
          retention-days: 7

  # =============================================================================
  # AUTO-DEPLOY TO STAGING - Only from develop branch
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # CRITICAL: Only when develop branch is pushed to (via merged PR)
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.invictusumvs.net
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup current staging
        run: |
          aws s3 sync s3://${{ secrets.STAGING_S3_BUCKET }} s3://${{ secrets.STAGING_S3_BUCKET }}-backup/current/ --delete || echo "No existing staging"

      - name: Deploy to staging
        run: |
          # Deploy with proper caching
          aws s3 sync ./dist s3://${{ secrets.STAGING_S3_BUCKET }} --delete \
            --cache-control "max-age=31536000" --exclude "*.html" --exclude "*.json"
          
          aws s3 sync ./dist s3://${{ secrets.STAGING_S3_BUCKET }} \
            --cache-control "no-cache, no-store, must-revalidate" --include "*.html" --include "*.json"

      - name: Invalidate CloudFront
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} \
            --id $INVALIDATION_ID

      - name: Run staging tests
        run: |
          sleep 60
          curl -f https://staging.invictusumvs.net/ || exit 1
          curl -f https://staging.invictusumvs.net/about || exit 1

      - name: Store deployment metadata
        run: |
          echo '{
            "commit": "${{ github.sha }}",
            "branch": "develop",
            "actor": "${{ github.actor }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "workflow_run": "${{ github.run_id }}",
            "ready_for_production": true
          }' > deployment-info.json
          
          aws s3 cp deployment-info.json s3://${{ secrets.STAGING_S3_BUCKET }}-backup/current/

      # - name: Notify team - Ready for Production
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#engineering'
      #     text: |
      #       ✅ **Staging Updated Successfully**
            
      #       **Branch:** develop
      #       **Commit:** ${{ github.sha }}
      #       **Author:** ${{ github.actor }}
      #       **Staging URL:** https://staging.invictusumvs.net
            
      #       🚀 **Ready for production promotion!**
      #       Use: `Actions` → `Deploy to AWS` → `promote-to-production`
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # PROMOTE TO PRODUCTION - Manual workflow dispatch only
  # =============================================================================
  promote-to-production:
    name: Promote to Production
    runs-on: ubuntu-latest
    # CRITICAL: Only via manual workflow dispatch
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'promote-to-production'
    environment:
      name: production
      url: https://invictusumvs.net
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify staging is ready
        run: |
          # Download staging metadata
          aws s3 cp s3://${{ secrets.STAGING_S3_BUCKET }}-backup/current/deployment-info.json staging-info.json || exit 1
          
          # Verify staging is healthy
          curl -f https://staging.invictusumvs.net/ || (echo "Staging is broken, aborting promotion" && exit 1)
          
          # Display what we're promoting
          echo "🚀 Promoting staging to production:"
          cat staging-info.json

      - name: Backup current production
        run: |
          BACKUP_KEY="production-backup-$(date +%Y%m%d-%H%M%S)"
          aws s3 sync s3://${{ secrets.PRODUCTION_S3_BUCKET }} s3://${{ secrets.PRODUCTION_S3_BUCKET }}-backup/${BACKUP_KEY}/ || echo "No existing production"
          aws s3 sync s3://${{ secrets.PRODUCTION_S3_BUCKET }} s3://${{ secrets.PRODUCTION_S3_BUCKET }}-backup/current/ --delete || echo "No existing production"

      - name: Promote staging to production
        run: |
          # Copy staging content to production
          aws s3 sync s3://${{ secrets.STAGING_S3_BUCKET }} s3://${{ secrets.PRODUCTION_S3_BUCKET }} --delete
          
          # Copy deployment metadata
          aws s3 cp s3://${{ secrets.STAGING_S3_BUCKET }}-backup/current/deployment-info.json s3://${{ secrets.PRODUCTION_S3_BUCKET }}-backup/current/

      - name: Invalidate production CloudFront
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} \
            --id $INVALIDATION_ID

      - name: Run production health checks
        run: |
          sleep 90
          curl -f https://invictusumvs.net/ || exit 1
          curl -f https://www.invictusumvs.net/ || exit 1

      - name: Update main branch (record promotion)
        run: |
          # Get staging commit info
          STAGING_COMMIT=$(cat staging-info.json | jq -r '.commit')
          
          # Checkout develop at the promoted commit
          git checkout $STAGING_COMMIT
          
          # Create promotion commit to main
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fast-forward main to promoted commit
          git checkout main
          git merge $STAGING_COMMIT --ff-only
          git push origin main
          
          # Tag the production release
          VERSION_TAG="v$(date +%Y.%m.%d)-${STAGING_COMMIT:0:7}"
          git tag -a "$VERSION_TAG" -m "Production release promoted from staging"
          git push origin "$VERSION_TAG"

      # - name: Notify production success
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#releases'
      #     text: |
      #       🎉 **PRODUCTION PROMOTION SUCCESSFUL** 🎉
            
      #       **Promoted by:** ${{ github.actor }}
      #       **From staging commit:** $(cat staging-info.json | jq -r '.commit')
      #       **Original author:** $(cat staging-info.json | jq -r '.actor')
      #       **Production URL:** https://invictusumvs.net
            
      #       ✅ All health checks passed
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # EMERGENCY ROLLBACK
  # =============================================================================
  emergency-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'emergency-rollback'
    environment:
      name: production-emergency
    permissions:
      id-token: write
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute rollback
        run: |
          echo "🚨 Executing emergency rollback..."
          
          # Restore from backup
          aws s3 sync s3://${{ secrets.PRODUCTION_S3_BUCKET }}-backup/current/ s3://${{ secrets.PRODUCTION_S3_BUCKET }} --delete --exclude "deployment-info.json"
          
          # Invalidate cache
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} --paths "/*"

      - name: Verify rollback
        run: |
          sleep 60
          curl -f https://invictusumvs.net/ || exit 1
          echo "✅ Rollback verification passed"

      # - name: Alert team
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#critical-alerts'
      #     text: |
      #       🔄 **EMERGENCY ROLLBACK COMPLETED**
            
      #       **Executed by:** ${{ github.actor }}
      #       **Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
      #       **Status:** Production restored to previous version
            
      #       ⚠️ **Next steps:** Investigate issue and prepare new fix
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}